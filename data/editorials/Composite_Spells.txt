First of all, the total health value might be very large. It may grow exponentially, so we can't use basic integer types to handle the health values. Thankfully, Kotlin has a BigInteger class which allows us to deal with arbitrarily large number addition/subtraction in O(S)O(S), where SS is the size of the greater number. Using induction on the total length of the composite spells, we can show that the length of each number is O(∑si)O(∑si). So, we need a solution that makes O(n+m+∑si)O(n+m+∑si) operations with big integers.Suppose we calculate the total change of health for every composite spell with dynamic programming (let it be deltaideltai for the ii-th spell). If we try iterating on components of the spell we cast, we will know our health value after using each component. However, we might miss the moment when the health of the monster went to 00 or lower in the middle of a component.We need a way to know if a spell puts the monster into non-positive health in the middle of casting. Let's consider the minimum value the monster's health becomes during casting the spell. Obviously, if it is positive, then the monster survives the spell, otherwise it dies.To quickly calculate the minimum health value, let's introduce another dynamic programming: let minDeltaiminDeltai be the minimum change of health while the ii-th spell is cast. Using the values of deltaideltai, we can calculate it recursively as follows: let the ii-th spell consist of components c1,c2,…,ckc1,c2,…,ck. The minimum health is achieved when we have finished casting the first several parts of the spell and are in the middle of casting the next part. So, the value of minDeltaiminDeltai can be calculated as minj=1k∑v=1j−1deltacv+minDeltacjminj=1k∑v=1j−1deltacv+minDeltacj, and we can compute it in O(k)O(k) additions/subtractions/comparisons of big integers.Okay, now we know the value of deltaideltai and minDeltaiminDeltai for each spell. For each composite spell we cast, we are now able to understand whether it will put the monster's health to 00 or lower in the middle of casting. So, to find the basic spell that kills the monster, we can use recursion.Let rec(remHP,idCompSpell)rec(remHP,idCompSpell) be a recursive function that computes the answer if the current health of the monster is remHPremHP, and we cast the spell idCompSpellidCompSpell. We can iterate on the first component of the spell that will bring the monster to non-positive health, and make a recursive call with the health value of the monster right before this component is cast, and the id of this component. Each call decreases the value of idCompSpellidCompSpell at least by 11, so we will call this function at most once for each composite spell, so all calls will work in O(∑si)O(∑si).So, the complexity of our solution is O(∑si⋅(n+m+∑si))O(∑si⋅(n+m+∑si)).