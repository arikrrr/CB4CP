How can we efficiently check if a range contains the same amount of zeroes and ones? Let's create an array aa where ai=−1ai=−1 if si=0si=0 and ai=1ai=1 if si=1si=1. Let's denote pp as the prefix sum array of aa. We want the contribution of −1−1 by the zeroes to cancel out with the ones, so if pr−pl−1=0pr−pl−1=0, then the range [l,r][l,r] contain equal amounts of zeroes and ones. We can rephrase the problem as the following: for each subrange [l,r][l,r], count the number of pairs (x,y)(x,y) such that px−1=pypx−1=py.Let's fix px−1px−1 and keep track of all potential yy such that y>xy>x and px−1=pypx−1=py. How many subarrays will cover [x,y][x,y]? Well, we have x+1x+1 options as ll and n−y+1n−y+1 options as rr, so the range [x,y][x,y] contributes to (x+1)⋅(n−y+1)(x+1)⋅(n−y+1) subarrays. We just need to calculate this expression for all potential yy now. Let's denote the all possible yy as y1,y2,...yky1,y2,...yk. We are asked to find the sum of (x+1)⋅(n−y1+1)+(x+1)⋅(n−y2+1)+⋯+(x+1)⋅(n−yk+1)(x+1)⋅(n−y1+1)+(x+1)⋅(n−y2+1)+⋯+(x+1)⋅(n−yk+1). Let's factor (x+1)(x+1) out, and we have (x+1)⋅((n−y1+1)+(n−y2+1)+⋯+(n−yk+1))(x+1)⋅((n−y1+1)+(n−y2+1)+⋯+(n−yk+1)). Since, the second part of the expression is just the sum of all (n−yi+1)(n−yi+1), we can first precalculate that sum and since y>xy>x, subtract as we sweep from left to right.