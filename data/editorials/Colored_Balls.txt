For a fixed set of colors, this is a standard problem with the following solution: let's denote the total number of balls as ss, then the value of the set is ⌈s2⌉⌈s2⌉; but there is an exception in the case when there is a color with more than s2s2 balls, then the value is the number of balls of this color.So the answer depends only on whether there is a color that has more balls than all the others combined.Using the aforementioned fact, we can come up with the following solution: let's iterate over the total number of balls in the set (denote it as jj) and increase the answer by ⌈j2⌉⌈j2⌉ for each subset of colors with exactly jj balls in it. The number of subsets with the fixed number of balls can be calculated using simple knapsack dynamic programming.It remains to consider the subsets of colors with a "dominant" color, because we added the wrong value to the answer for them. Let the "dominant" color be ii and the total number of balls in all other colors be jj (j<aij<ai). The answer should be increased by ai−⌈ai+j2⌉ai−⌈ai+j2⌉ (the correct value of this set is aiai, but we have already added the wrong value in the answer — ⌈ai+j2⌉⌈ai+j2⌉, so we should compensate it) for each subset of colors with exactly jj balls in it (we can use the same dp as in previous case). Note that if you consider only j<aij<ai, you don't have to deal with the possibility that the "dominant" color could already be included in the subset.This solution works in O(nS)O(nS) time, where SS is the total number of balls.