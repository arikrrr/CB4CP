Define the pattern of a (validly) folded strip to be the set of characters, in order, seen from above after all folds are made.It is always possible to fold the strip in such a way that no two adjacent characters in the pattern are equal. If we fold in between every pair of equal characters, and don't fold in between every pair of distinct characters, we will achieve this. This diagram shows one example of this (the red lines indicate where to fold, and the final pattern is 1010110101):This set of folds will always be valid because it ensures that all 11s in the original string are on odd indices and all 00s are on even indices (or vice versa).Also, there is only one obtainable pattern (up to reversal) that is alternating in this way. It is never possible to fold in between two adjacent different characters, because that can never be part of a valid folding, and if there exists a pair of adjacent equal characters that you don't fold in between, the pattern will not be alternating.We can also show that the pattern formed by this process is always optimal. Let tt be any pattern obtained from a valid folding of ss. Notice that if we perform a valid fold on tt, that corresponds to a valid fold on ss, because we can essentially "compose" the valid folding of ss into tt and the valid folding of tt into one valid folding.So we can fold tt using the process above, which will yield a pattern with alternating characters of length at most len(t)len(t). Because the alternating pattern is unique for a given ss, it must be the same (up to reversal) as the one described above. So the above pattern is of size at most len(t)len(t) for any valid pattern tt, and is therefore optimal.We can simulate the folding process to determine the final length.Complexity: O(n)O(n)