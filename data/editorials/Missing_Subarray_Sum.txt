Let's first look at the set of subarray sums of a palindromic array aa of nn positive integers. Because aa is a palindrome, the sum of the subarray with indices in the range [l,r][l,r] is the same as the sum of the subarray with indices in the range [n+1−r,n+1−l][n+1−r,n+1−l]. So if we ignore all subarrays where l+r=n+1l+r=n+1 (subarrays centered at the center of aa), each sum must appear an even number of times.Also, every "centered" subarray [l,n+1−l][l,n+1−l] must have a unique sum. This is because all elements of aa are strictly positive, and if the "centered" subarrays are ordered by length, each one contains all elements in the previous one, along with two new elements, so its sum must be strictly greater.Therefore, the set of subarray sums that appear an odd number of times is exactly the set of sums of subarrays centered at the center of aa. For example, in the array a=[1,2,3,2,1]a=[1,2,3,2,1], the sums that appear an odd number of times are:So if we have all n(n+1)2n(n+1)2 subarray sums of aa, we can then use the "centered" sums to reconstruct aa itself. The smallest "centered" sum is either the middle element or the sum of the middle two (equal) elements, depending on the parity of nn, and for each "centered" sum in ascending order after that, its difference with the previous sum must be the sum of the next two (equal) elements closest to the center of aa.Now, let's find out how to reconstruct the missing sum. We consider two cases:We can then remove all sums of subarrays of bb from the initial input list, and look at what is remaining. If we let [l,r][l,r] be the indices of the missing subarray, the largest remaining sum in the list must be the sum of [1,r][1,r] in aa (or equivalently [l,n][l,n]). Let this sum be xx and the sum of bb be yy.If l>1l>1 (and therefore r<nr<n), the missing sum must be 2x−y2x−y, because the 2x2x part includes everything in the missing subarray twice, and everything else once, and yy includes everything once. l=1l=1, r=nr=n initially seems like it will be an edge case, but the same equation works there as well, since 2x2x includes everything in the missing array (all of aa) once, and everything in bb once, and yy includes everything in bb once.In a similar way to the previous case, we can then remove all sums from the initial input list from the set of subset sums of bb. If we let [l,r][l,r] be the indices of the extra "centered" subarray in bb, the largest remaining sum in the list must be the sum of [1,r][1,r] in bb (or equivalently [l,n+2][l,n+2]). If we let xx be this largest sum, and yy be the sum of bb, we can use similar logic to the previous case to determine that the missing sum is 2x−y2x−y.So we can determine the missing sum, using the number of sums that appear an odd number of times in the input to determine which case we are in. Once we have found the missing sum, we just need to reconstruct aa using the process above. Also, notice that by the construction we have followed so far, the solution is always unique.Complexity: O(n2logn)O(n2log⁡n)