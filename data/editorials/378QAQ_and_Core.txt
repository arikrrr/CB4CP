Consider the maximum character mm of the string ss.If mm only appears once, then obviously the string starting with it is the largest in lexicographical order. To make it the smallest, mm should be arranged at the end. Other characters can be arranged arbitrarily.If mm appears more than twice, it can be proven that the beginning and end of the answer string must be mm. If the beginning of the string is not mm, moving the character at the beginning to somewhere before a non-first mm can make the suffix lexicographical order starting with this mm smaller, while the suffix lexicographical order starting with mm after this remains unchanged. For suffixes that do not start with mm, they are definitely not the largest, so they do not need to be considered. If the end of the string is not mm, first remove it, and all suffix lexicographical orders become smaller. Similarly, it can also be placed in front of a certain mm to reduce the lexicographical order.In this case, the answer is always in the form of ms1ms2m…mstmms1ms2m…mstm. Where s1,s2,…,sts1,s2,…,st contain characters that are less than mm, it could also be an empty string. Now suppose that the set s1,s2,…,sts1,s2,…,st is determined, and consider how to arrange their order. Suppose we are currently comparing two suffixes Si=msim…mstmSi=msim…mstm and Sj=msjm…mstmSj=msjm…mstm, and suppose si+ksi+k and sj+ksj+k are the first two substrings that appear differently. Then msim…msi+k−1msim…msi+k−1 and msjm…msj+k−1msjm…msj+k−1 must be equal, and the size relationship between SiSi and SjSj is the same as the size relationship between msi+kmsi+k and msj+kmsj+k. In this way, all msimsi can be sorted according to lexicographical order, and regarded as a new character, and Solving the original problem for (ms1​)(ms2)…(mst​)(ms1​)(ms2)…(mst​) is sufficient.Now consider how to determine the set s1,s2,…,sts1,s2,…,st. For a certain sisi, it should obviously be ordered, because this can make msimsi smaller. There is also another property. Suppose there are si=picsi=pic and sjsj such that msjmsj is the current lexicographically largest string, and mpi<msjmpi<msj, where cc is a character less than mm. Putting cc after sjsj can make the answer smaller.The proof of the property is as follows. Without loss of generality, let f1=picf1=pic, f2=pif2=pi, f3=sjcf3=sjc, f4=sjf4=sj, then we have mf2<mf1<mf4mf2<mf1<mf4 and f3m<f4mf3m<f4m. Consider the subproblem after iteration, by definition, f4f4 is the largest character in the problem. If f1f1 and f4f4 are used, and there is an f4f4 to the left of some f1f1 in the optimal solution string, then replacing this f1f1 and its nearest f4f4 on the left with f2f2 and f3f3 respectively, it is easy to prove that the largest suffix will definitely become smaller or unchanged. Otherwise, all f1f1 are to the left of all f4f4, at this time you can arbitrarily replace some f1f1 and f4f4 with f2f2 and f3f3 respectively, it is easy to prove that the largest suffix still becomes smaller or unchanged.Based on the above discussion, we can now give the final greedy algorithm for the problem. Suppose the largest character mm has t+1t+1 occurrences. If t=0t=0, then put the only mm at the end, and the other characters can be arranged arbitrarily. Otherwise, suppose there are pp characters less than mm, if p≤tp≤t, it can be proved that there is at most one character between any two mm. Consider |si|≥2|si|≥2, sj=εsj=ε (empty string), then they meet the above properties, and it is more optimal to exchange the last character of sisi to sjsj. Therefore, s1,…,sps1,…,sp is a single character, sp+1=⋯=st=εsp+1=⋯=st=ε, and recursively solve the subproblem. Note that to ensure time complexity, when t≫pt≫p, multiple rounds of recursion need to be combined.If p>tp>t, it can be similarly proved that there will not be an sisi that is an empty string. In addition, consider the first character of all sisi, for those among these tt characters that are not the largest, using the same property, it can be proved that the length of the string they are in must be 11, and no other characters will follow. Also, since sisi is ordered, it can be proved that the first character of all sisi must be the smallest tt characters less than mm. Next, the remaining characters will only be filled after those largest characters among these tt characters, and it can be similarly proved that those filled in the second position of these strings are also the smallest among the remaining characters, and so on, until all characters are used up.Notice that the complexity of each recursion is linear, and each recursion at least halves the number of characters, so the total complexity is O(nlogn)O(nlog⁡n).