To solve the problem, let's model the behavior of the Kraken. Suppose initially there are two or more ships in the sea, we will consider the first and last ship, denote their durabilities as alal and arar, and also let m=min(al,ar)m=min(al,ar), initially setting l=1l=1 and r=nr=n.After two attacks, the durability of both ships will decrease by 11. If k≥2⋅mk≥2⋅m, then we need to subtract mm from the durabilities of both ships, and also reduce the remaining attacks of the Kraken by 2⋅m2⋅m. If k<2⋅mk<2⋅m, then the Kraken will inflict ⌊k2⌋⌊k2⌋ damage to the rr-th ship. In this case, if kk is odd, the ll-th ship will receive ⌊k2⌋+1⌊k2⌋+1 damage, otherwise ⌊k2⌋⌊k2⌋ damage.After these attacks, some ships may have sunk. If al=0al=0, we increase ll by 11, if ar=0ar=0, we decrease rr by 11, and move on to considering the next pair of ships that will be under attack by the Kraken. If at some point l=rl=r, it means that there is only one ship left in the sea, and the Kraken can sink it if k≥alk≥al.A deque is perfect for this problem, allowing us to not think about ll and rr and simply look at the first and last elements in the queue. At each step of considering a pair of ships, either the Kraken's attacks end, or at least one ship sinks. The final complexity of the solution is O(n)O(n).